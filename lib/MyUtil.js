// Generated by CoffeeScript 1.6.2
var checkProjectDir, file, getInfoFile, path, spawn, util;

path = require('path');

util = require('util');

spawn = require('child_process').spawn;

file = require('./file');

checkProjectDir = exports.checkProjectDir = function(dirPath) {
  var ConfigFile;

  dirPath = path.resolve(process.cwd(), dirPath || './');
  ConfigFile = path.relative(dirPath, './config.json');
  if (file.exists(ConfigFile)) {
    return true;
  } else {
    util.puts('Error: ' + dirPath + ' was not the project directory, file config.json was not found!\n');
    return false;
  }
};

getInfoFile = exports.getInfoFile = function(projectDir) {
  var infoFile;

  projectDir = projectDir || './';
  if (!checkProjectDir(projectDir)) {
    return false;
  }
  return infoFile = path.resolve(projectDir, 'data/info');
};

exports.getInfo = function(type, filePath, projectDir) {
  var infoFile, list, projectInfo, result,
    _this = this;

  projectDir = projectDir || './';
  infoFile = getInfoFile(projectDir);
  if (!infoFile) {
    return false;
  }
  projectInfo = file.readJSON(infoFile);
  list = projectInfo[type];
  filePath = path.relative(projectDir, filePath);
  result = null;
  list.forEach(function(item) {
    if (item.file === filePath) {
      return result = item;
    }
  });
  return result;
};

exports.getInfos = function(projectDir) {
  var infoFile;

  projectDir = projectDir || './';
  infoFile = getInfoFile(projectDir);
  if (!infoFile) {
    return false;
  }
  return file.readJSON(infoFile);
};

exports.addInfo = function(type, filePath, projectDir) {
  var info, infoFile, infos;

  projectDir = projectDir || './';
  infoFile = getInfoFile(projectDir);
  if (!infoFile) {
    return false;
  }
  info = {};
  info.file = path.relative(projectDir, filePath);
  info.ctime = file.getCTime(filePath);
  info.mtime = file.getMTime(filePath);
  infos = file.readJSON(infoFile) || {};
  infos[type] = infos[type] || [];
  infos[type].push(info);
  file.write(infoFile, JSON.stringify(infos, null, 4));
  return info;
};

exports.updateInfos = function() {
  var infoFile, infos, pages, posts,
    _this = this;

  infoFile = getInfoFile();
  if (!infoFile) {
    return false;
  }
  infos = {};
  infos.post = [];
  posts = file.dir(fileApi.getSrcFile('post'));
  posts.forEach(function(filePath) {
    var post;

    post = {};
    post.file = path.relative(projectDir, filePath);
    post.ctime = file.getCTime(filePath);
    post.mtime = file.getMTime(filePath);
    return infos.post.push(post);
  });
  infos.page = [];
  pages = file.dir(fileApi.getSrcFile('page'));
  pages.forEach(function(filePath) {
    var page;

    page = {};
    page.file = path.relative(projectDir, filePath);
    page.ctime = file.getCTime(filePath);
    page.mtime = file.getMTime(filePath);
    return infos.page.push(page);
  });
  return file.write(infoFile, JSON.stringify(infos, null, 4));
};

/*
	command: 'git'
	args: ['add', '-A']
	options:
		cwd: process.cwd
	exit: () ->
	stdout: () ->
*/


exports.spawn = function(options) {
  var comm;

  comm = spawn(options.command, options.args, options.options);
  comm.stdout.setEncoding('utf8');
  comm.stderr.setEncoding('utf8');
  comm.stdout.on('data', options.stdout || function(data) {
    return util.puts(data);
  });
  comm.stderr.on('data', options.stderr || function(data) {
    return util.puts(data);
  });
  if (options.exit) {
    return comm.on('exit', options.exit);
  }
};
