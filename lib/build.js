// Generated by CoffeeScript 1.6.2
var MyUtil, RSS, clc, dataApi, file, fileApi, fs, jade, moment, parseArg, path, projectDir, projectInfo, rendApi, templateDir, usage, util;

util = require('util');

clc = require('cli-color');

fs = require('fs');

path = require('path');

jade = require('jade');

moment = require('moment');

file = require('./file');

usage = require('./usage');

parseArg = require('./arg').parse;

MyUtil = require('./MyUtil');

RSS = require('rss');

templateDir = './public/template/';

projectDir = './';

projectInfo = null;

fileApi = {
  getJadeFile: function(type) {
    return file.read(path.resolve(templateDir, type + '.jade'));
  },
  getSrcFile: function(type) {
    switch (type) {
      case 'page':
        return path.resolve(projectDir, 'data/pages');
      case 'post':
        return path.resolve(projectDir, 'data/posts');
      case 'archive':
        return path.resolve(projectDir, 'data/posts');
    }
  },
  getDestFile: function(type) {
    switch (type) {
      case 'archive':
        return path.resolve(projectDir, 'post');
      case 'post':
        return path.resolve(projectDir, 'post');
      case 'page':
        return path.resolve(projectDir, 'page');
      case 'index':
        return path.resolve(projectDir, 'index.html');
      case 'rss':
        return path.resolve(projectDir, 'rss.xml');
      default:
        return projectDir;
    }
  },
  srcToDest: function(type, srcFilePath) {
    var fileUrl, relativePath;

    relativePath = path.relative(this.getSrcFile(type), srcFilePath);
    fileUrl = path.resolve(this.getDestFile(type), relativePath);
    return file.mdToHtml(fileUrl);
  },
  srcToUrl: function(type, srcFilePath) {
    var fileUrl, relativePath;

    relativePath = path.relative(this.getSrcFile(type), srcFilePath);
    fileUrl = path.resolve(this.getDestFile(type), relativePath);
    return file.pathToUrl(file.mdToHtml(fileUrl), projectDir);
  },
  getInfo: function(type, filePath) {
    var list, result,
      _this = this;

    projectInfo = projectInfo || MyUtil.getInfos(projectDir);
    list = projectInfo[type];
    filePath = path.relative(projectDir, filePath);
    result = null;
    list.forEach(function(item) {
      if (item.file === filePath) {
        return result = item;
      }
    });
    if (!result) {
      result = this.addInfo(type, filePath, projectDir);
    }
    return result;
  },
  addInfo: function(type, filePath) {
    return MyUtil.addInfo(type, filePath, projectDir);
  },
  getMTime: function(type, filePath) {
    var info;

    info = this.getInfo(type, filePath);
    if (info) {
      return info.mtime;
    }
  },
  getCTime: function(type, filePath) {
    var info;

    info = this.getInfo(type, filePath);
    if (info) {
      return info.ctime;
    }
  },
  sortByCreateTime: function(type, files) {
    var _this = this;

    return files.sort(function(a, b) {
      return _this.getCTime(type, a) < _this.getCTime(type, b);
    });
  }
};

dataApi = {
  getPostList: function() {
    var items, posts,
      _this = this;

    posts = (JSON.parse(file.read('data/info'))).post;
    posts = posts.reverse();
    items = [];
    posts.forEach(function(post) {
      if (!file.isMd(post.file)) {
        return;
      }
      return items.push({
        title: file.pathToTitle(post.file),
        url: fileApi.srcToUrl('post', post.file),
        time: fileApi.getCTime('post', post.file),
        content: file.readMdToHtml(post.file)
      });
    });
    return items;
  },
  getPageList: function() {
    var fileList, items, pageDir,
      _this = this;

    pageDir = fileApi.getSrcFile('page');
    fileList = file.dir(pageDir);
    items = [];
    fileList = fileApi.sortByCreateTime('page', fileList);
    fileList.forEach(function(filePath) {
      if (!file.isMd(filePath)) {
        return;
      }
      return items.push({
        title: file.pathToTitle(filePath),
        url: fileApi.srcToUrl('page', filePath),
        time: fileApi.getCTime('page', filePath)
      });
    });
    return items;
  },
  getArchiveList: function() {
    var archiveDir, archiveList, items,
      _this = this;

    archiveDir = fileApi.getSrcFile('post');
    archiveList = file.dir(archiveDir, true);
    items = [];
    archiveList = archiveList.sort(function(a, b) {
      return a < b;
    });
    archiveList.forEach(function(filePath) {
      if (file.isHide(filePath)) {
        return;
      }
      return items.push({
        title: file.getFileName(filePath),
        url: fileApi.srcToUrl('archive', filePath) + '/'
      });
    });
    return items;
  },
  getArchivePostList: function(archiveName) {
    var fileList, items, postDir,
      _this = this;

    postDir = path.resolve(fileApi.getSrcFile('post'), archiveName);
    fileList = file.dir(postDir);
    items = [];
    fileList = fileApi.sortByCreateTime('post', fileList);
    fileList.forEach(function(filePath) {
      if (!file.isMd(filePath)) {
        return;
      }
      return items.push({
        title: file.pathToTitle(filePath),
        url: fileApi.srcToUrl('post', filePath),
        time: fileApi.getCTime('post', filePath)
      });
    });
    return items;
  },
  getLocals: function(type, arg1) {
    var archiveName, keywords, locals, rssPath, siteUrl;

    locals = {
      site: file.readJSON(path.resolve(projectDir, './config.json')),
      pageName: ''
    };
    siteUrl = locals.site.siteUrl;
    rssPath = siteUrl[siteUrl.length - 1] === '/' ? 'rss.xml' : '/rss.xml';
    locals.site.rssUrl = siteUrl + rssPath;
    switch (type) {
      case 'index':
        locals.items = this.getPostList().slice(0, 5);
        locals.archives = this.getArchiveList();
        locals.pages = this.getPageList();
        locals.metaKeywords = locals.site.keywords;
        locals.metaDescription = locals.site.description;
        break;
      case 'archive':
        archiveName = arg1;
        locals.pageName = archiveName;
        locals.items = this.getArchivePostList(archiveName);
        locals.metaKeywords = locals.site.keywords;
        locals.metaDescription = locals.site.description;
        break;
      case 'page':
        locals.pageName = arg1.title;
        locals.entry = arg1;
        locals.site.keywords = locals.site.keywords || '';
        keywords = locals.site.keywords.split(',');
        keywords.push(locals.pageName);
        locals.metaKeywords = keywords.join(',');
        locals.metaDescription = locals.pageName;
        break;
      case 'post':
        locals.pageName = arg1.title;
        locals.entry = arg1;
        locals.site.keywords = locals.site.keywords || '';
        keywords = locals.site.keywords.split(',');
        keywords.push(locals.pageName);
        locals.metaKeywords = keywords.join(',');
        locals.metaDescription = locals.pageName;
    }
    return locals;
  }
};

rendApi = {
  index: function(keepQuiet) {
    var compile, dest;

    dest = fileApi.getDestFile('index');
    compile = jade.compile(fileApi.getJadeFile('index'), {
      filename: path.resolve(templateDir, 'includes')
    });
    file.write(dest, compile(dataApi.getLocals('index')));
    if (!keepQuiet) {
      return util.puts('File ' + dest + ' created.');
    }
  },
  archive: function(keepQuiet) {
    var archives, compile, destDir, srcDir,
      _this = this;

    srcDir = fileApi.getSrcFile('archive');
    destDir = fileApi.getDestFile('archive');
    archives = file.dir(srcDir, true);
    compile = jade.compile(fileApi.getJadeFile('archive'), {
      filename: path.resolve(templateDir, 'includes')
    });
    return archives.forEach(function(archivePath) {
      var archiveDestFile, archiveName;

      if (file.isHide(archivePath)) {
        return;
      }
      archiveName = file.getFileName(archivePath);
      archiveDestFile = path.resolve(destDir, archiveName, 'index.html');
      file.write(archiveDestFile, compile(dataApi.getLocals('archive', archiveName)));
      if (!keepQuiet) {
        return util.puts('File ' + archiveDestFile + ' created.');
      }
    });
  },
  page: function(keepQuiet) {
    var compile, pages, srcDir,
      _this = this;

    srcDir = fileApi.getSrcFile('page');
    pages = file.dir(srcDir, true);
    compile = jade.compile(fileApi.getJadeFile('page'), {
      filename: path.resolve(templateDir, 'includes')
    });
    return pages.forEach(function(pagePath) {
      var entry, pageFile, pageTitle;

      if (!file.isMd(pagePath)) {
        return;
      }
      pageTitle = file.pathToTitle(pagePath);
      entry = {
        title: pageTitle,
        content: file.readMdToHtml(pagePath),
        time: fileApi.getMTime('page', pagePath),
        url: fileApi.srcToUrl('page', pagePath)
      };
      pageFile = fileApi.srcToDest('page', pagePath);
      file.write(pageFile, compile(dataApi.getLocals('page', entry)));
      if (!keepQuiet) {
        return util.puts('File ' + pageFile + ' created.');
      }
    });
  },
  post: function(keepQuiet) {
    var compile, posts, srcDir,
      _this = this;

    srcDir = fileApi.getSrcFile('post');
    posts = file.dir(srcDir);
    compile = jade.compile(fileApi.getJadeFile('post'), {
      filename: path.resolve(templateDir, 'includes')
    });
    return posts.forEach(function(postPath) {
      var entry, postFile, postTitle;

      if (!file.isMd(postPath)) {
        return;
      }
      postTitle = file.pathToTitle(postPath);
      entry = {
        title: postTitle,
        content: file.readMdToHtml(postPath),
        url: fileApi.srcToUrl('post', postPath),
        time: fileApi.getMTime('post', postPath),
        url: fileApi.srcToUrl('post', postPath)
      };
      postFile = fileApi.srcToDest('post', postPath);
      file.write(postFile, compile(dataApi.getLocals('post', entry)));
      if (!keepQuiet) {
        return util.puts('File ' + postFile + ' created.');
      }
    });
  },
  rss: function(keepQuiet) {
    var feed, feedFile, locals, posts,
      _this = this;

    posts = (JSON.parse(file.read('data/info'))).post;
    posts = posts.reverse();
    locals = dataApi.getLocals('index');
    feedFile = fileApi.getDestFile('rss');
    feed = new RSS({
      title: locals.site.name,
      description: locals.site.description,
      feed_url: path.join(locals.site.siteUrl, '/rss.xml'),
      site_url: locals.site.siteUrl,
      image_url: locals.site.favicon,
      author: locals.site.author
    });
    posts.forEach(function(post) {
      var postTitle;

      if (!file.isMd(post.file)) {
        return;
      }
      postTitle = file.pathToTitle(post.file);
      return feed.item({
        title: postTitle,
        description: file.readMdToHtml(post.file),
        url: fileApi.srcToUrl('post', post.file),
        date: fileApi.getMTime('post', post.file)
      });
    });
    file.write(feedFile, feed.xml());
    if (!keepQuiet) {
      return util.puts('File ' + feedFile + ' created.');
    }
  }
};

module.exports = function(args) {
  var arg, keepQuiet;

  arg = parseArg(args);
  projectDir = path.resolve(process.cwd(), arg.req[0] || './');
  if (!MyUtil.checkProjectDir(projectDir)) {
    usage.puts('build');
    return;
  }
  templateDir = path.resolve(projectDir, './public/template/');
  if (!file.exists(templateDir)) {
    usage.puts('build');
    return;
  }
  keepQuiet = arg.opt.indexOf('q') > 0;
  rendApi.index(keepQuiet);
  rendApi.archive(keepQuiet);
  rendApi.page(keepQuiet);
  rendApi.post(keepQuiet);
  rendApi.rss(keepQuiet);
  return util.puts('Update complete.');
};
